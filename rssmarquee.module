<?php 
/**
 * @file
 * rssmarquee file
 *
 * Created by George Sokianos (walkero@gmail.com)
 *
 * @todo
 * 
 * @changelog
 * 	v1.0  (2015/03/11)
 */
 
define('SCROLLBOX_MIN_PLUGIN_VERSION', '1.3.1');

$path = drupal_get_path('module', 'rssmarquee');
$variant = 'minified';
if (module_exists('libraries')) {
	libraries_load('scrollbox', $variant);
}
drupal_add_js($path . '/rssmarquee.js');
drupal_add_css($path . '/rssmarquee.css');


/**
 * Implements hook_block_info().
 */
function rssmarquee_block_info() {
  $blocks['rssmarquee'] = array(
    'info' => t('RSS Marquee'),
    'cache' => DRUPAL_CACHE_PER_ROLE
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function rssmarquee_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  switch ($delta) {
    case 'rssmarquee':
		
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('RSS Marquee');
	  $block['content'] = _rssmarquee_list_content();
      break;
  }
  return $block;
}


/**
 * Implements hook_libraries_info().
 */
function rssmarquee_libraries_info() {
  $libraries['scrollbox'] = array(
    'name' => 'jQuery Scrollbox',
    'vendor url' => 'http://wmh.github.io/jquery-scrollbox',
    'download url' => 'https://github.com/wmh/jquery-scrollbox/archive/master.zip',
    'version arguments' => array(
      'file' => 'package.json',
	  'pattern' => '@(?i:"version":\s"?([0-9\.a-z]+)")@',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'jquery.scrollbox.min.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'jquery.scrollbox.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'jquery.scrollbox.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_block_configure().
 */
function rssmarquee_block_configure($delta = '') {
  $form = array();
  if ($delta == 'rssmarquee') {
    $form['rssmarquee_block_rss_feed_url'] = array(
      '#type' => 'textfield',
      '#title' => t('RSS Feed'),
      '#size' => 60,
      '#description' => t('Insert here the RSS feed URL. Include http://'),
      '#default_value' => variable_get('rssmarquee_block_rss_feed_url',  'http://'),
    );
	$form['rssmarquee_block_articles_num'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum number of artcles'),
      '#size' => 60,
      '#description' => t('Insert here the maximum number of articles that will be visible. Insert 0 for all available articles.'),
      '#default_value' => variable_get('rssmarquee_block_articles_num',  '0'),
    );
  }
  return $form;
}


/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function rssmarquee_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'rssmarquee') {
    // Have Drupal save the string to the database.
    variable_set('rssmarquee_block_rss_feed_url', $edit['rssmarquee_block_rss_feed_url']);
    variable_set('rssmarquee_block_articles_num', $edit['rssmarquee_block_articles_num']);
  }
  return;
}


function _rssmarquee_list_content() {
	$url 			= variable_get('rssmarquee_block_rss_feed_url');
	$show_number 	= variable_get('rssmarquee_block_articles_num');
	$body 			= '';
	if(($url != '') && ($url != 'http://')) {
		$rss_data 	=  _rssmarquee_xml2array($url);
		 
		$body .= '<div id="rssmarquee_1" class="scroll-text">';
		$body .= '<ul>';
			
			$cnt = 0;
			foreach($rss_data["rss"]["channel"]["item"] AS $rss_item) {
				//print('<pre>');
				//print_r($rss_item);
				//print('</pre><hr>');
				$body .= '<li><a href="' . $rss_item["link"] . '" target="_blank">' . $rss_item["title"] . '</a></li>';
				$cnt++;
				if($show_number > 0) {
					if($cnt >= $show_number)
						break;
				}
			}
			
		$body .= '</ul>';
		$body .= '</div>';
	}
	 
	return $body;
}

function _rssmarquee_xml2array($url, $get_attributes = 1, $priority = 'tag')
{
	/*  Taken from the PHP manual at the URL
	**  http://gr2.php.net/manual/en/function.xml-parse.php#87920
	*/
	$contents = "";
	if (!function_exists('xml_parser_create'))
	{
		return array ();
	}
	$parser = xml_parser_create('');
	if (!($fp = @ fopen($url, 'rb')))
	{
		return array ();
	}
	while (!feof($fp))
	{
		$contents .= fread($fp, 8192);
	}
	fclose($fp);
	xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, "UTF-8");
	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
	xml_parse_into_struct($parser, trim($contents), $xml_values);
	xml_parser_free($parser);
	if (!$xml_values)
		return; //Hmm...
	$xml_array = array ();
	$parents = array ();
	$opened_tags = array ();
	$arr = array ();
	$current = & $xml_array;
	$repeated_tag_index = array ();
	foreach ($xml_values as $data)
	{
		unset ($attributes, $value);
		extract($data);
		$result = array ();
		$attributes_data = array ();
		if (isset ($value))
		{
			if ($priority == 'tag')
				$result = $value;
			else
				$result['value'] = $value;
		}
		if (isset ($attributes) and $get_attributes)
		{
			foreach ($attributes as $attr => $val)
			{
				if ($priority == 'tag')
					$attributes_data[$attr] = $val;
				else
					$result['attr'][$attr] = $val; //Set all the attributes in a array called 'attr'
			}
		}
		if ($type == "open")
		{
			$parent[$level -1] = & $current;
			if (!is_array($current) or (!in_array($tag, array_keys($current))))
			{
				$current[$tag] = $result;
				if ($attributes_data)
					$current[$tag . '_attr'] = $attributes_data;
				$repeated_tag_index[$tag . '_' . $level] = 1;
				$current = & $current[$tag];
			}
			else
			{
				if (isset ($current[$tag][0]))
				{
					$current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;
					$repeated_tag_index[$tag . '_' . $level]++;
				}
				else
				{
					$current[$tag] = array (
						$current[$tag],
						$result
					);
					$repeated_tag_index[$tag . '_' . $level] = 2;
					if (isset ($current[$tag . '_attr']))
					{
						$current[$tag]['0_attr'] = $current[$tag . '_attr'];
						unset ($current[$tag . '_attr']);
					}
				}
				$last_item_index = $repeated_tag_index[$tag . '_' . $level] - 1;
				$current = & $current[$tag][$last_item_index];
			}
		}
		elseif ($type == "complete")
		{
			if (!isset ($current[$tag]))
			{
				$current[$tag] = $result;
				$repeated_tag_index[$tag . '_' . $level] = 1;
				if ($priority == 'tag' and $attributes_data)
					$current[$tag . '_attr'] = $attributes_data;
			}
			else
			{
				if (isset ($current[$tag][0]) and is_array($current[$tag]))
				{
					$current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;
					if ($priority == 'tag' and $get_attributes and $attributes_data)
					{
						$current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
					}
					$repeated_tag_index[$tag . '_' . $level]++;
				}
				else
				{
					$current[$tag] = array (
						$current[$tag],
						$result
					);
					$repeated_tag_index[$tag . '_' . $level] = 1;
					if ($priority == 'tag' and $get_attributes)
					{
						if (isset ($current[$tag . '_attr']))
						{
							$current[$tag]['0_attr'] = $current[$tag . '_attr'];
							unset ($current[$tag . '_attr']);
						}
						if ($attributes_data)
						{
							$current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
						}
					}
					$repeated_tag_index[$tag . '_' . $level]++; //0 and 1 index is already taken
				}
			}
		}
		elseif ($type == 'close')
		{
			$current = & $parent[$level -1];
		}
	}
	return ($xml_array);
}


